@model cshh.Asp.Models.Polyglot.ForeignTextReadViewModel

<link href="~/Content/book.css" rel="stylesheet" />

@helper Bookmark(cshh.Asp.Models.Polyglot.BookmarkViewModel bookmark)
{
        <span class="fa fa-bookmark" title="@bookmark.Note" id="bookmark-@bookmark.Position">(@bookmark.Title)</span>
}

@{

    System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
    sw.Start();
    var vm = Model;

    string text = HttpUtility.HtmlEncode(vm.Text);

    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
    System.Collections.Hashtable hashtable = new System.Collections.Hashtable(vm.Bookmarks.Count());
    foreach(var bookmark in vm.Bookmarks)
    {
        hashtable.Add(bookmark.Position, bookmark);
    }
    int pointsCount = 0;
    for(int i = 0; i < text.Length; i++)
    {
        var c = text[i];
        switch(c)
        {
            case '\n': stringBuilder.Append("<br />"); break;
            case '.':
                {

                    stringBuilder.Append($"<a href='{@Url.Action("AddBookmark", new { position = pointsCount, foreignText_Id = vm.Id, title = "z", note = "x" })}' title='добавить закладку' class='bookmark-new-href'>.</a>");

                    if(hashtable.ContainsKey(pointsCount))
                    {
                        var bookmark = hashtable[pointsCount] as cshh.Asp.Models.Polyglot.BookmarkViewModel;
                        string bookmarkTextResult = Bookmark(bookmark).ToHtmlString();
                        stringBuilder.Append(bookmarkTextResult);
                    }
                    pointsCount++;
                }
                break;
            default:
                stringBuilder.Append(c);
                break;
        }
    }

    text = stringBuilder.ToString();


    sw.Stop();
    <div> sw :@sw.Elapsed.ToString()</div>
}

@Helpers.ReadMenu(vm.Bookmarks, this.Url)

<div id="foreign-text" class="book-pages">
    @Html.Raw(text)
</div>



